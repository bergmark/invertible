name:                invertible
version:             0.1
synopsis:            Bidirectional arrows, bijective functions, and invariant functors
description:         
  Representations and operations for bidirectional arrows (total isomorphisms: an
  arrow paired with its inverse).  Classes for invariant functors and monoidal
  functors.  Includes a number of useful bijections and operations, as well as
  interoperability with related packages.
license:             BSD3
author:              Dylan Simon
maintainer:          dylan@dylex.net
copyright:           2016
category:            Data, Control
build-type:          Simple
cabal-version:       >=1.20

flag semigroupoids
  description: Support the semigroupoids package

flag invariant
  description: Support the invariant package

flag lens
  description: Support the lens package

flag HList
  description: Support the HList package

flag TypeCompose
  description: Support the TypeCompose package

library
  other-modules:     
    Data.Bijection.Internal
  exposed-modules:     
    Control.BiArrow
    Data.Bijection.Type
    Data.Bijection.TH
    Data.Bijection.Bits
    Data.Bijection.Bool
    Data.Bijection.Coerce
    Data.Bijection.Complex
    Data.Bijection.Either
    Data.Bijection.Function
    Data.Bijection.Functor
    Data.Bijection.List
    Data.Bijection.Maybe
    Data.Bijection.Ord
    Data.Bijection.Tuple
    Data.Bijection.Prelude
    Data.Bijection
    Control.Invariant.Functor
    Control.Invariant.Monoidal

  build-depends:       
    base >= 4.8 && <5,
    haskell-src-meta == 0.6.*,
    template-haskell == 2.*
  default-language:    Haskell2010
  default-extensions: TypeOperators, QuasiQuotes
  ghc-options: -Wall

  if flag(semigroupoids)
    exposed-modules: Data.Bijection.Semigroupoid
    build-depends: semigroupoids >= 4

  if flag(invariant)
    exposed-modules: Data.Bijection.Invariant
    build-depends: invariant

  if flag(lens)
    exposed-modules: Data.Bijection.Lens
    build-depends: lens == 4.*

  if flag(HList)
    exposed-modules: Data.Bijection.HList
    exposed-modules: Control.Invariant.Monoidal.HList
    build-depends: HList == 0.4.*

  if flag(TypeCompose)
    exposed-modules: Data.Bijection.TypeCompose
    build-depends: TypeCompose >= 0.3 (Data.Bijection as TypeCompose.Data.Bijection)
